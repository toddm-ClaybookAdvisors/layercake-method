# app/src/test_entities.py
#
# PURPOSE: Pytest unit tests for Adversary movement—verifies that the adversary never overwrites or moves onto a door ('0') tile, including multiple edge cases.
# GENERATED BY: Layer 0032 (refactor, test adversary door-protection behavior—full edge suite)
# LLM MODEL: GPT-4o (2024-06)

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

import pytest

from entities import Adversary

class DummyGame:
    """
    Minimal stub game object for testing.
    """
    def __init__(self, map_data):
        self.map = map_data
        self.seen = [[True for _ in row] for row in map_data]  # All visible for test
        self.layer = 0
        self.tick = 0
        self.fps = 60
        self.messages = []
        self.viewport_width = len(map_data[0])
        self.viewport_height = len(map_data)
    
def is_floor(game_map, x, y):
    """
    Test floor function: returns True for '.' (floor), False otherwise.
    """
    rows = len(game_map)
    cols = len(game_map[0])
    if 0 <= y < rows and 0 <= x < cols:
        return game_map[y][x] == '.'
    return False

def add_message(msg):
    """
    Dummy message collector.
    """
    pass

def test_adversary_does_not_overwrite_single_door():
    """
    Test that the adversary never moves onto a single door tile (represented by '0').
    """
    test_map = [
        ['#', '.', '#'],
        ['.', '0', '.'],
        ['#', '.', '#'],
    ]
    game = DummyGame(test_map)
    adversary = Adversary(x=1, y=0)
    player_trail = set()
    player_pos = (0, 0)

    for _ in range(10):
        adversary.move(game, player_trail, player_pos, is_floor, add_message)
        assert (adversary.x, adversary.y) != (1, 1), "Adversary moved onto the door tile at (1, 1)"
        assert game.map[1][1] == '0', "Door tile at (1, 1) was overwritten by adversary"
        assert game.map[adversary.y][adversary.x] == '.', f"Adversary moved onto non-floor tile at {(adversary.x, adversary.y)}"

def test_adversary_does_not_overwrite_multiple_doors():
    """
    Test that the adversary never moves onto any of multiple door tiles.
    """
    test_map = [
        ['#', '0', '#', '0', '#'],
        ['.', '.', '.', '.', '.'],
        ['#', '0', '#', '0', '#'],
    ]
    door_positions = [(1,0), (3,0), (1,2), (3,2)]
    game = DummyGame(test_map)
    adversary = Adversary(x=2, y=1)
    player_trail = set()
    player_pos = (2, 1)

    for _ in range(20):
        adversary.move(game, player_trail, player_pos, is_floor, add_message)
        assert (adversary.x, adversary.y) not in door_positions, f"Adversary moved onto a door tile at {adversary.x, adversary.y}"
        for (x, y) in door_positions:
            assert game.map[y][x] == '0', f"Door tile at {(x, y)} was overwritten by adversary"
        assert game.map[adversary.y][adversary.x] == '.', f"Adversary moved onto non-floor tile at {(adversary.x, adversary.y)}"

def test_adversary_surrounded_by_doors():
    """
    Test that the adversary avoids doors when surrounded on all sides except one valid floor.
    """
    test_map = [
        ['0', '0', '0'],
        ['0', '.', '0'],
        ['0', '0', '0'],
    ]
    game = DummyGame(test_map)
    adversary = Adversary(x=1, y=1)
    player_trail = set()
    player_pos = (1, 1)

    # Should not move onto any door—if there are no valid moves, adversary should stay put
    for _ in range(5):
        old_pos = (adversary.x, adversary.y)
        adversary.move(game, player_trail, player_pos, is_floor, add_message)
        assert (adversary.x, adversary.y) == old_pos, "Adversary moved from surrounded safe tile"
        for y in range(3):
            for x in range(3):
                if test_map[y][x] == '0':
                    assert game.map[y][x] == '0', f"Door tile at {(x, y)} was overwritten by adversary"

def test_adversary_at_edge_next_to_door():
    """
    Test adversary at map edge, adjacent to door—must avoid moving onto the door.
    """
    test_map = [
        ['0', '.'],
        ['#', '#'],
    ]
    game = DummyGame(test_map)
    adversary = Adversary(x=1, y=0)
    player_trail = set()
    player_pos = (1, 0)

    for _ in range(5):
        adversary.move(game, player_trail, player_pos, is_floor, add_message)
        assert (adversary.x, adversary.y) != (0, 0), "Adversary moved onto the edge door tile at (0, 0)"
        assert game.map[0][0] == '0', "Edge door tile at (0, 0) was overwritten by adversary"
        assert game.map[adversary.y][adversary.x] == '.', f"Adversary moved onto non-floor tile at {(adversary.x, adversary.y)}"

def test_adversary_random_movement_no_floors_except_door():
    """
    Test adversary cannot move if only option is a door (should stay put).
    """
    test_map = [
        ['#', '0', '#'],
        ['#', '.', '#'],
        ['#', '#', '#'],
    ]
    game = DummyGame(test_map)
    adversary = Adversary(x=1, y=1)
    player_trail = set()
    player_pos = (1, 1)

    # All valid moves are blocked except door; adversary must not move onto door.
    for _ in range(5):
        old_pos = (adversary.x, adversary.y)
        adversary.move(game, player_trail, player_pos, is_floor, add_message)
        assert (adversary.x, adversary.y) == old_pos, "Adversary moved onto door when no other floor tiles"
        assert game.map[0][1] == '0', "Door tile at (1, 0) was overwritten by adversary"
        assert game.map[adversary.y][adversary.x] == '.', f"Adversary moved onto non-floor tile at {(adversary.x, adversary.y)}"

def test_adversary_locked_on_player_trail_ignores_door():
    """
    Test that even if the shortest path to the player is through a door, adversary does not step on the door.
    """
    test_map = [
        ['.', '0', '.'],
        ['.', '.', '.'],
        ['.', '.', '.'],
    ]
    game = DummyGame(test_map)
    adversary = Adversary(x=0, y=0)
    player_trail = {(0,0), (1,0), (2,0)}
    player_pos = (2, 0)

    for _ in range(3):
        adversary.move(game, player_trail, player_pos, is_floor, add_message)
        # Adversary must not step onto (1,0) which is a door
        assert (adversary.x, adversary.y) != (1, 0), "Adversary moved onto door while following player trail"
        assert game.map[0][1] == '0', "Door tile at (1, 0) was overwritten by adversary"
        assert game.map[adversary.y][adversary.x] == '.', f"Adversary moved onto non-floor tile at {(adversary.x, adversary.y)}"
